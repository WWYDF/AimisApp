generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Games {
  TRIVIA
  OMEGLE
}

enum SusLevel {
  LOW
  MEDIUM
  HIGH
}

model User {
  id                    String                @id @unique
  username              String
  displayName           String?
  avatar                String?
  settings              UserSettings?
  hidden                Boolean               @default(false)
  badges                Badge[]
  items                 OwnedItems[]

  // Game Stuff
  points                Int                   @default(0)
  games                 Completed[]
  triviaSessions        TriviaSessions[]
  streakTrivia          Int                   @default(0)
  streakOmegle          Int                   @default(0)
  longestStreak         Int                   @default(0) // For all gamemodes
  pointsHistory         PointsHistory[]

  lastSeen              DateTime              @default(now())
  createdAt             DateTime              @default(now())

  @@index([points])
}

model UserSettings {
  discordId             String                @id @unique
  user                  User                  @relation(fields: [discordId], references: [id], onDelete: Cascade)

  nameOverride          String?
  emoteAvatar           String?               @default("DefaultThumbsUp") // If null, use discord.
  showDiscord           Boolean               @default(false)
}

model Badge {
  id                    String                @id @unique
  name                  String                
  icon                  String?
  color                 String?

  users                 User[]
}

model OwnedItems {
  id                    Int                   @id @default(autoincrement())
  itemId                String
  user                  User                  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  
  discordId             String
  boughtAt              DateTime              @default(now())

  @@unique([discordId, itemId])
}

model Completed {
  id                    Int                   @id @default(autoincrement())
  type                  Games
  won                   Boolean
  discordId             String
  user                  User                  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  completedAt           DateTime              @default(now())
}

model Suspicions {
  id                    Int                   @id @default(autoincrement())
  session               TriviaSessions        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId             Int                   @unique
  discordId             String

  completeTimes         Int[]
  avgTTC                Float?                // In Seconds
  level                 SusLevel
  loggedAt              DateTime              @default(now())
}

// Historical Tables
model PointsHistory {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  points                Int                   @default(0)
  discordId             String
  user                  User                  @relation(fields: [discordId], references: [id], onDelete: Cascade)

  @@unique([createdAt, discordId])
}

model TriviaSessions {
  id                    Int                   @id @unique @default(autoincrement())
  discordId             String
  user                  User                  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  question              Int                   @default(1)
  correct               Boolean?              // If its null, its pending vvv
  answered              String?               // If its null, they haven't answered yet
  points                Int?
  suspicious            Suspicions?
  hintUsed              Boolean               @default(false)
  lastUpdated           DateTime              @default(now())
  createdAt             DateTime              @default(now())
}